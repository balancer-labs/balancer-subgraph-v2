# Vault
type Balancer @entity {
  id: ID!
  poolCount: Int!
  pools: [Pool!] @derivedFrom(field: "vaultID")

  totalLiquidity: BigDecimal!
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
}

enum PoolType {
  Weighted
  Stable
}

type Pool @entity {
  id: ID!
  address: Bytes!
  poolType: PoolType
  strategyType: Int!
  symbol: String
  name: String
  swapFee: BigDecimal!

  totalWeight: BigDecimal!
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
  totalLiquidity: BigDecimal!
  totalShares: BigDecimal!
  
  createTime: Int!
  swapsCount: BigInt!
  holdersCount: BigInt!

  vaultID: Balancer!
  tx: Bytes

  tokensList: [Bytes!]!

  tokens: [PoolToken!] @derivedFrom(field: "poolId")
  swaps: [Swap!] @derivedFrom(field: "poolId")
  shares: [PoolShare!] @derivedFrom(field: "poolId")
  historicalValues: [PoolHistoricalLiquidity!] @derivedFrom(field: "poolId")

  # StablePool Only
  amp: BigInt
}

type PoolToken @entity {
  id: ID!
  poolId: Pool!
  symbol: String
  name: String
  decimals: Int!
  address: String!
  balance: BigDecimal!
  invested: BigDecimal!
  investments: [Investment!] @derivedFrom(field: "poolTokenId")

  # WeightedPool Only
  weight: BigDecimal
}

type PoolShare @entity {
  id: ID!
  userAddress: User!
  poolId: Pool!
  balance: BigDecimal!
}

type User @entity {
  id: ID!
  sharesOwned: [PoolShare!]  @derivedFrom(field: "userAddress")
  swaps: [Swap!]  @derivedFrom(field: "userAddress")
  userBalances: [UserBalance!]  @derivedFrom(field: "userAddress")
}

type UserBalance @entity {
  id:  ID!
  userAddress: User
  token: Bytes!
  balance: BigDecimal!
}

type Swap @entity {
  id: ID!
  caller: Bytes!
  tokenIn: Bytes!
  tokenInSym: String!
  tokenOut: Bytes!
  tokenOutSym: String!
  tokenAmountIn: BigDecimal!
  tokenAmountOut: BigDecimal!
  poolId: Pool!
  userAddress: User!
  timestamp: Int!
  tx: Bytes!
}

type Join @entity {
  id: ID!
  sender: Bytes!
  amounts: [BigDecimal!]!
  pool: Pool!
  user: User!
  timestamp: Int!
  tx: Bytes!
}

type Exit @entity {
  id: ID!
  sender: Bytes!
  amounts: [BigDecimal!]!
  pool: Pool!
  user: User!
  timestamp: Int!
  tx: Bytes!
}

type LatestPrice @entity {
  id: ID!
  asset: Bytes!
  pricingAsset: Bytes! # address of stable asset
  poolId: Pool! # last pool which set price
  price:  BigDecimal! # all the latest prices
  block: BigInt! # last block that prices were updated
}

type PoolHistoricalLiquidity @entity {
  id: ID!
  poolId: Pool!
  poolTotalShares: BigDecimal!
  poolLiquidity: BigDecimal! # total value, priced in the stable asset - ie USD
  poolShareValue: BigDecimal!
  pricingAsset: Bytes! # address of stable asset
  block: BigInt!
}

type TokenPrice @entity {
  id: ID! # address of token + address of stablecoin-poolId
  poolId: Pool!
  asset: Bytes!
  amount: BigDecimal!
  pricingAsset: Bytes! # address of stable asset
  price: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
}

type Investment @entity {
  id: ID!
  assetManagerAddress: Bytes!
  amount: BigDecimal!
  poolTokenId: PoolToken!
  timestamp: Int!
}

type PoolSnapshot @entity {
  id: ID!
  pool: Pool!
  amounts: [BigDecimal!]
  totalShares: BigDecimal!
  swapVolume: BigDecimal!
  swapFees: BigDecimal!
  timestamp: Int!
}
