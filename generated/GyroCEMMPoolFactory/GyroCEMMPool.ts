// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CEMMDerivedParamsValidated extends ethereum.Event {
  get params(): CEMMDerivedParamsValidated__Params {
    return new CEMMDerivedParamsValidated__Params(this);
  }
}

export class CEMMDerivedParamsValidated__Params {
  _event: CEMMDerivedParamsValidated;

  constructor(event: CEMMDerivedParamsValidated) {
    this._event = event;
  }

  get derivedParamsValidated(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class CEMMParamsValidated extends ethereum.Event {
  get params(): CEMMParamsValidated__Params {
    return new CEMMParamsValidated__Params(this);
  }
}

export class CEMMParamsValidated__Params {
  _event: CEMMParamsValidated;

  constructor(event: CEMMParamsValidated) {
    this._event = event;
  }

  get paramsValidated(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class InvariantAterInitializeJoin extends ethereum.Event {
  get params(): InvariantAterInitializeJoin__Params {
    return new InvariantAterInitializeJoin__Params(this);
  }
}

export class InvariantAterInitializeJoin__Params {
  _event: InvariantAterInitializeJoin;

  constructor(event: InvariantAterInitializeJoin) {
    this._event = event;
  }

  get invariantAfterJoin(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class InvariantOldAndNew extends ethereum.Event {
  get params(): InvariantOldAndNew__Params {
    return new InvariantOldAndNew__Params(this);
  }
}

export class InvariantOldAndNew__Params {
  _event: InvariantOldAndNew;

  constructor(event: InvariantOldAndNew) {
    this._event = event;
  }

  get oldInvariant(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newInvariant(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OracleEnabledChanged extends ethereum.Event {
  get params(): OracleEnabledChanged__Params {
    return new OracleEnabledChanged__Params(this);
  }
}

export class OracleEnabledChanged__Params {
  _event: OracleEnabledChanged;

  constructor(event: OracleEnabledChanged) {
    this._event = event;
  }

  get enabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class OracleIndexUpdated extends ethereum.Event {
  get params(): OracleIndexUpdated__Params {
    return new OracleIndexUpdated__Params(this);
  }
}

export class OracleIndexUpdated__Params {
  _event: OracleIndexUpdated;

  constructor(event: OracleIndexUpdated) {
    this._event = event;
  }

  get oracleUpdatedIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PausedStateChanged extends ethereum.Event {
  get params(): PausedStateChanged__Params {
    return new PausedStateChanged__Params(this);
  }
}

export class PausedStateChanged__Params {
  _event: PausedStateChanged;

  constructor(event: PausedStateChanged) {
    this._event = event;
  }

  get paused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class SwapFeePercentageChanged extends ethereum.Event {
  get params(): SwapFeePercentageChanged__Params {
    return new SwapFeePercentageChanged__Params(this);
  }
}

export class SwapFeePercentageChanged__Params {
  _event: SwapFeePercentageChanged;

  constructor(event: SwapFeePercentageChanged) {
    this._event = event;
  }

  get swapFeePercentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SwapParams extends ethereum.Event {
  get params(): SwapParams__Params {
    return new SwapParams__Params(this);
  }
}

export class SwapParams__Params {
  _event: SwapParams;

  constructor(event: SwapParams) {
    this._event = event;
  }

  get balances(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get invariant(): SwapParamsInvariantStruct {
    return changetype<SwapParamsInvariantStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SwapParamsInvariantStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GyroCEMMPool__getCEMMParamsResultParamsStruct extends ethereum.Tuple {
  get alpha(): BigInt {
    return this[0].toBigInt();
  }

  get beta(): BigInt {
    return this[1].toBigInt();
  }

  get c(): BigInt {
    return this[2].toBigInt();
  }

  get s(): BigInt {
    return this[3].toBigInt();
  }

  get lambda(): BigInt {
    return this[4].toBigInt();
  }
}

export class GyroCEMMPool__getCEMMParamsResultDStruct extends ethereum.Tuple {
  get tauAlpha(): GyroCEMMPool__getCEMMParamsResultDTauAlphaStruct {
    return changetype<GyroCEMMPool__getCEMMParamsResultDTauAlphaStruct>(
      this[0].toTuple()
    );
  }

  get tauBeta(): GyroCEMMPool__getCEMMParamsResultDTauBetaStruct {
    return changetype<GyroCEMMPool__getCEMMParamsResultDTauBetaStruct>(
      this[1].toTuple()
    );
  }

  get u(): BigInt {
    return this[2].toBigInt();
  }

  get v(): BigInt {
    return this[3].toBigInt();
  }

  get w(): BigInt {
    return this[4].toBigInt();
  }

  get z(): BigInt {
    return this[5].toBigInt();
  }

  get dSq(): BigInt {
    return this[6].toBigInt();
  }
}

export class GyroCEMMPool__getCEMMParamsResultDTauAlphaStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class GyroCEMMPool__getCEMMParamsResultDTauBetaStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class GyroCEMMPool__getCEMMParamsResult {
  value0: GyroCEMMPool__getCEMMParamsResultParamsStruct;
  value1: GyroCEMMPool__getCEMMParamsResultDStruct;

  constructor(
    value0: GyroCEMMPool__getCEMMParamsResultParamsStruct,
    value1: GyroCEMMPool__getCEMMParamsResultDStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }
}

export class GyroCEMMPool__getMiscDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class GyroCEMMPool__getPastAccumulatorsInputQueriesStruct extends ethereum.Tuple {
  get variable(): i32 {
    return this[0].toI32();
  }

  get ago(): BigInt {
    return this[1].toBigInt();
  }
}

export class GyroCEMMPool__getPausedStateResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GyroCEMMPool__getSampleResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromSignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class GyroCEMMPool__getTimeWeightedAverageInputQueriesStruct extends ethereum.Tuple {
  get variable(): i32 {
    return this[0].toI32();
  }

  get secs(): BigInt {
    return this[1].toBigInt();
  }

  get ago(): BigInt {
    return this[2].toBigInt();
  }
}

export class GyroCEMMPool__onExitPoolResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class GyroCEMMPool__onJoinPoolResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class GyroCEMMPool__onSwapInputRequestStruct extends ethereum.Tuple {
  get kind(): i32 {
    return this[0].toI32();
  }

  get tokenIn(): Address {
    return this[1].toAddress();
  }

  get tokenOut(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get poolId(): Bytes {
    return this[4].toBytes();
  }

  get lastChangeBlock(): BigInt {
    return this[5].toBigInt();
  }

  get from(): Address {
    return this[6].toAddress();
  }

  get to(): Address {
    return this[7].toAddress();
  }

  get userData(): Bytes {
    return this[8].toBytes();
  }
}

export class GyroCEMMPool__queryExitResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class GyroCEMMPool__queryJoinResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class GyroCEMMPool extends ethereum.SmartContract {
  static bind(address: Address): GyroCEMMPool {
    return new GyroCEMMPool("GyroCEMMPool", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _dSq(): BigInt {
    let result = super.call("_dSq", "_dSq():(int256)", []);

    return result[0].toBigInt();
  }

  try__dSq(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_dSq", "_dSq():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _paramsAlpha(): BigInt {
    let result = super.call("_paramsAlpha", "_paramsAlpha():(int256)", []);

    return result[0].toBigInt();
  }

  try__paramsAlpha(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_paramsAlpha", "_paramsAlpha():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _paramsBeta(): BigInt {
    let result = super.call("_paramsBeta", "_paramsBeta():(int256)", []);

    return result[0].toBigInt();
  }

  try__paramsBeta(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_paramsBeta", "_paramsBeta():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _paramsC(): BigInt {
    let result = super.call("_paramsC", "_paramsC():(int256)", []);

    return result[0].toBigInt();
  }

  try__paramsC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_paramsC", "_paramsC():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _paramsLambda(): BigInt {
    let result = super.call("_paramsLambda", "_paramsLambda():(int256)", []);

    return result[0].toBigInt();
  }

  try__paramsLambda(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_paramsLambda", "_paramsLambda():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _paramsS(): BigInt {
    let result = super.call("_paramsS", "_paramsS():(int256)", []);

    return result[0].toBigInt();
  }

  try__paramsS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_paramsS", "_paramsS():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _tauAlphaX(): BigInt {
    let result = super.call("_tauAlphaX", "_tauAlphaX():(int256)", []);

    return result[0].toBigInt();
  }

  try__tauAlphaX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_tauAlphaX", "_tauAlphaX():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _tauAlphaY(): BigInt {
    let result = super.call("_tauAlphaY", "_tauAlphaY():(int256)", []);

    return result[0].toBigInt();
  }

  try__tauAlphaY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_tauAlphaY", "_tauAlphaY():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _tauBetaX(): BigInt {
    let result = super.call("_tauBetaX", "_tauBetaX():(int256)", []);

    return result[0].toBigInt();
  }

  try__tauBetaX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_tauBetaX", "_tauBetaX():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _tauBetaY(): BigInt {
    let result = super.call("_tauBetaY", "_tauBetaY():(int256)", []);

    return result[0].toBigInt();
  }

  try__tauBetaY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_tauBetaY", "_tauBetaY():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _u(): BigInt {
    let result = super.call("_u", "_u():(int256)", []);

    return result[0].toBigInt();
  }

  try__u(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_u", "_u():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _v(): BigInt {
    let result = super.call("_v", "_v():(int256)", []);

    return result[0].toBigInt();
  }

  try__v(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_v", "_v():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _w(): BigInt {
    let result = super.call("_w", "_w():(int256)", []);

    return result[0].toBigInt();
  }

  try__w(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_w", "_w():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _z(): BigInt {
    let result = super.call("_z", "_z():(int256)", []);

    return result[0].toBigInt();
  }

  try__z(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_z", "_z():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getActionId(selector: Bytes): Bytes {
    let result = super.call("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);

    return result[0].toBytes();
  }

  try_getActionId(selector: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAuthorizer(): Address {
    let result = super.call("getAuthorizer", "getAuthorizer():(address)", []);

    return result[0].toAddress();
  }

  try_getAuthorizer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAuthorizer",
      "getAuthorizer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCEMMParams(): GyroCEMMPool__getCEMMParamsResult {
    let result = super.call(
      "getCEMMParams",
      "getCEMMParams():((int256,int256,int256,int256,int256),((int256,int256),(int256,int256),int256,int256,int256,int256,int256))",
      []
    );

    return changetype<GyroCEMMPool__getCEMMParamsResult>(
      new GyroCEMMPool__getCEMMParamsResult(
        changetype<GyroCEMMPool__getCEMMParamsResultParamsStruct>(
          result[0].toTuple()
        ),
        changetype<GyroCEMMPool__getCEMMParamsResultDStruct>(
          result[1].toTuple()
        )
      )
    );
  }

  try_getCEMMParams(): ethereum.CallResult<GyroCEMMPool__getCEMMParamsResult> {
    let result = super.tryCall(
      "getCEMMParams",
      "getCEMMParams():((int256,int256,int256,int256,int256),((int256,int256),(int256,int256),int256,int256,int256,int256,int256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<GyroCEMMPool__getCEMMParamsResult>(
        new GyroCEMMPool__getCEMMParamsResult(
          changetype<GyroCEMMPool__getCEMMParamsResultParamsStruct>(
            value[0].toTuple()
          ),
          changetype<GyroCEMMPool__getCEMMParamsResultDStruct>(
            value[1].toTuple()
          )
        )
      )
    );
  }

  getInvariant(): BigInt {
    let result = super.call("getInvariant", "getInvariant():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getInvariant(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getInvariant", "getInvariant():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLargestSafeQueryWindow(): BigInt {
    let result = super.call(
      "getLargestSafeQueryWindow",
      "getLargestSafeQueryWindow():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLargestSafeQueryWindow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLargestSafeQueryWindow",
      "getLargestSafeQueryWindow():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastInvariant(): BigInt {
    let result = super.call(
      "getLastInvariant",
      "getLastInvariant():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastInvariant(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastInvariant",
      "getLastInvariant():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLatest(variable: i32): BigInt {
    let result = super.call("getLatest", "getLatest(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(variable))
    ]);

    return result[0].toBigInt();
  }

  try_getLatest(variable: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLatest", "getLatest(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(variable))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMiscData(): GyroCEMMPool__getMiscDataResult {
    let result = super.call(
      "getMiscData",
      "getMiscData():(int256,int256,uint256,uint256,bool,uint256)",
      []
    );

    return new GyroCEMMPool__getMiscDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBigInt()
    );
  }

  try_getMiscData(): ethereum.CallResult<GyroCEMMPool__getMiscDataResult> {
    let result = super.tryCall(
      "getMiscData",
      "getMiscData():(int256,int256,uint256,uint256,bool,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GyroCEMMPool__getMiscDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBigInt()
      )
    );
  }

  getNormalizedWeights(): Array<BigInt> {
    let result = super.call(
      "getNormalizedWeights",
      "getNormalizedWeights():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getNormalizedWeights(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getNormalizedWeights",
      "getNormalizedWeights():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getOwner(): Address {
    let result = super.call("getOwner", "getOwner():(address)", []);

    return result[0].toAddress();
  }

  try_getOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPastAccumulators(
    queries: Array<GyroCEMMPool__getPastAccumulatorsInputQueriesStruct>
  ): Array<BigInt> {
    let result = super.call(
      "getPastAccumulators",
      "getPastAccumulators((uint8,uint256)[]):(int256[])",
      [ethereum.Value.fromTupleArray(queries)]
    );

    return result[0].toBigIntArray();
  }

  try_getPastAccumulators(
    queries: Array<GyroCEMMPool__getPastAccumulatorsInputQueriesStruct>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPastAccumulators",
      "getPastAccumulators((uint8,uint256)[]):(int256[])",
      [ethereum.Value.fromTupleArray(queries)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPausedState(): GyroCEMMPool__getPausedStateResult {
    let result = super.call(
      "getPausedState",
      "getPausedState():(bool,uint256,uint256)",
      []
    );

    return new GyroCEMMPool__getPausedStateResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getPausedState(): ethereum.CallResult<
    GyroCEMMPool__getPausedStateResult
  > {
    let result = super.tryCall(
      "getPausedState",
      "getPausedState():(bool,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GyroCEMMPool__getPausedStateResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getPoolId(): Bytes {
    let result = super.call("getPoolId", "getPoolId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getPoolId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getPoolId", "getPoolId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRate(): BigInt {
    let result = super.call("getRate", "getRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getRate", "getRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSample(index: BigInt): GyroCEMMPool__getSampleResult {
    let result = super.call(
      "getSample",
      "getSample(uint256):(int256,int256,int256,int256,int256,int256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return new GyroCEMMPool__getSampleResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_getSample(
    index: BigInt
  ): ethereum.CallResult<GyroCEMMPool__getSampleResult> {
    let result = super.tryCall(
      "getSample",
      "getSample(uint256):(int256,int256,int256,int256,int256,int256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GyroCEMMPool__getSampleResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  getSwapFeePercentage(): BigInt {
    let result = super.call(
      "getSwapFeePercentage",
      "getSwapFeePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSwapFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSwapFeePercentage",
      "getSwapFeePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTimeWeightedAverage(
    queries: Array<GyroCEMMPool__getTimeWeightedAverageInputQueriesStruct>
  ): Array<BigInt> {
    let result = super.call(
      "getTimeWeightedAverage",
      "getTimeWeightedAverage((uint8,uint256,uint256)[]):(uint256[])",
      [ethereum.Value.fromTupleArray(queries)]
    );

    return result[0].toBigIntArray();
  }

  try_getTimeWeightedAverage(
    queries: Array<GyroCEMMPool__getTimeWeightedAverageInputQueriesStruct>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTimeWeightedAverage",
      "getTimeWeightedAverage((uint8,uint256,uint256)[]):(uint256[])",
      [ethereum.Value.fromTupleArray(queries)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getTotalSamples(): BigInt {
    let result = super.call(
      "getTotalSamples",
      "getTotalSamples():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalSamples(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalSamples",
      "getTotalSamples():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVault(): Address {
    let result = super.call("getVault", "getVault():(address)", []);

    return result[0].toAddress();
  }

  try_getVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("getVault", "getVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gyroConfig(): Address {
    let result = super.call("gyroConfig", "gyroConfig():(address)", []);

    return result[0].toAddress();
  }

  try_gyroConfig(): ethereum.CallResult<Address> {
    let result = super.tryCall("gyroConfig", "gyroConfig():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onExitPool(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): GyroCEMMPool__onExitPoolResult {
    let result = super.call(
      "onExitPool",
      "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new GyroCEMMPool__onExitPoolResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_onExitPool(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): ethereum.CallResult<GyroCEMMPool__onExitPoolResult> {
    let result = super.tryCall(
      "onExitPool",
      "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GyroCEMMPool__onExitPoolResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  onJoinPool(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): GyroCEMMPool__onJoinPoolResult {
    let result = super.call(
      "onJoinPool",
      "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new GyroCEMMPool__onJoinPoolResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_onJoinPool(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): ethereum.CallResult<GyroCEMMPool__onJoinPoolResult> {
    let result = super.tryCall(
      "onJoinPool",
      "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GyroCEMMPool__onJoinPoolResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  onSwap(
    request: GyroCEMMPool__onSwapInputRequestStruct,
    balanceTokenIn: BigInt,
    balanceTokenOut: BigInt
  ): BigInt {
    let result = super.call(
      "onSwap",
      "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(request),
        ethereum.Value.fromUnsignedBigInt(balanceTokenIn),
        ethereum.Value.fromUnsignedBigInt(balanceTokenOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_onSwap(
    request: GyroCEMMPool__onSwapInputRequestStruct,
    balanceTokenIn: BigInt,
    balanceTokenOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "onSwap",
      "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(request),
        ethereum.Value.fromUnsignedBigInt(balanceTokenIn),
        ethereum.Value.fromUnsignedBigInt(balanceTokenOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  queryExit(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): GyroCEMMPool__queryExitResult {
    let result = super.call(
      "queryExit",
      "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256,uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new GyroCEMMPool__queryExitResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_queryExit(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): ethereum.CallResult<GyroCEMMPool__queryExitResult> {
    let result = super.tryCall(
      "queryExit",
      "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256,uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GyroCEMMPool__queryExitResult(
        value[0].toBigInt(),
        value[1].toBigIntArray()
      )
    );
  }

  queryJoin(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): GyroCEMMPool__queryJoinResult {
    let result = super.call(
      "queryJoin",
      "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256,uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new GyroCEMMPool__queryJoinResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_queryJoin(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): ethereum.CallResult<GyroCEMMPool__queryJoinResult> {
    let result = super.tryCall(
      "queryJoin",
      "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256,uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GyroCEMMPool__queryJoinResult(
        value[0].toBigInt(),
        value[1].toBigIntArray()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get params(): ConstructorCallParamsStruct {
    return changetype<ConstructorCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get configAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallParamsStruct extends ethereum.Tuple {
  get baseParams(): ConstructorCallParamsBaseParamsStruct {
    return changetype<ConstructorCallParamsBaseParamsStruct>(this[0].toTuple());
  }

  get cemmParams(): ConstructorCallParamsCemmParamsStruct {
    return changetype<ConstructorCallParamsCemmParamsStruct>(this[1].toTuple());
  }

  get derivedCemmParams(): ConstructorCallParamsDerivedCemmParamsStruct {
    return changetype<ConstructorCallParamsDerivedCemmParamsStruct>(
      this[2].toTuple()
    );
  }
}

export class ConstructorCallParamsBaseParamsStruct extends ethereum.Tuple {
  get vault(): Address {
    return this[0].toAddress();
  }

  get name(): string {
    return this[1].toString();
  }

  get symbol(): string {
    return this[2].toString();
  }

  get token0(): Address {
    return this[3].toAddress();
  }

  get token1(): Address {
    return this[4].toAddress();
  }

  get swapFeePercentage(): BigInt {
    return this[5].toBigInt();
  }

  get pauseWindowDuration(): BigInt {
    return this[6].toBigInt();
  }

  get bufferPeriodDuration(): BigInt {
    return this[7].toBigInt();
  }

  get oracleEnabled(): boolean {
    return this[8].toBoolean();
  }

  get owner(): Address {
    return this[9].toAddress();
  }
}

export class ConstructorCallParamsCemmParamsStruct extends ethereum.Tuple {
  get alpha(): BigInt {
    return this[0].toBigInt();
  }

  get beta(): BigInt {
    return this[1].toBigInt();
  }

  get c(): BigInt {
    return this[2].toBigInt();
  }

  get s(): BigInt {
    return this[3].toBigInt();
  }

  get lambda(): BigInt {
    return this[4].toBigInt();
  }
}

export class ConstructorCallParamsDerivedCemmParamsStruct extends ethereum.Tuple {
  get tauAlpha(): ConstructorCallParamsDerivedCemmParamsTauAlphaStruct {
    return changetype<ConstructorCallParamsDerivedCemmParamsTauAlphaStruct>(
      this[0].toTuple()
    );
  }

  get tauBeta(): ConstructorCallParamsDerivedCemmParamsTauBetaStruct {
    return changetype<ConstructorCallParamsDerivedCemmParamsTauBetaStruct>(
      this[1].toTuple()
    );
  }

  get u(): BigInt {
    return this[2].toBigInt();
  }

  get v(): BigInt {
    return this[3].toBigInt();
  }

  get w(): BigInt {
    return this[4].toBigInt();
  }

  get z(): BigInt {
    return this[5].toBigInt();
  }

  get dSq(): BigInt {
    return this[6].toBigInt();
  }
}

export class ConstructorCallParamsDerivedCemmParamsTauAlphaStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class ConstructorCallParamsDerivedCemmParamsTauBetaStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DirtyUninitializedOracleSamplesCall extends ethereum.Call {
  get inputs(): DirtyUninitializedOracleSamplesCall__Inputs {
    return new DirtyUninitializedOracleSamplesCall__Inputs(this);
  }

  get outputs(): DirtyUninitializedOracleSamplesCall__Outputs {
    return new DirtyUninitializedOracleSamplesCall__Outputs(this);
  }
}

export class DirtyUninitializedOracleSamplesCall__Inputs {
  _call: DirtyUninitializedOracleSamplesCall;

  constructor(call: DirtyUninitializedOracleSamplesCall) {
    this._call = call;
  }

  get startIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get endIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DirtyUninitializedOracleSamplesCall__Outputs {
  _call: DirtyUninitializedOracleSamplesCall;

  constructor(call: DirtyUninitializedOracleSamplesCall) {
    this._call = call;
  }
}

export class EnableOracleCall extends ethereum.Call {
  get inputs(): EnableOracleCall__Inputs {
    return new EnableOracleCall__Inputs(this);
  }

  get outputs(): EnableOracleCall__Outputs {
    return new EnableOracleCall__Outputs(this);
  }
}

export class EnableOracleCall__Inputs {
  _call: EnableOracleCall;

  constructor(call: EnableOracleCall) {
    this._call = call;
  }
}

export class EnableOracleCall__Outputs {
  _call: EnableOracleCall;

  constructor(call: EnableOracleCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnExitPoolCall extends ethereum.Call {
  get inputs(): OnExitPoolCall__Inputs {
    return new OnExitPoolCall__Inputs(this);
  }

  get outputs(): OnExitPoolCall__Outputs {
    return new OnExitPoolCall__Outputs(this);
  }
}

export class OnExitPoolCall__Inputs {
  _call: OnExitPoolCall;

  constructor(call: OnExitPoolCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get lastChangeBlock(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get protocolSwapFeePercentage(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class OnExitPoolCall__Outputs {
  _call: OnExitPoolCall;

  constructor(call: OnExitPoolCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get value1(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class OnJoinPoolCall extends ethereum.Call {
  get inputs(): OnJoinPoolCall__Inputs {
    return new OnJoinPoolCall__Inputs(this);
  }

  get outputs(): OnJoinPoolCall__Outputs {
    return new OnJoinPoolCall__Outputs(this);
  }
}

export class OnJoinPoolCall__Inputs {
  _call: OnJoinPoolCall;

  constructor(call: OnJoinPoolCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get lastChangeBlock(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get protocolSwapFeePercentage(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class OnJoinPoolCall__Outputs {
  _call: OnJoinPoolCall;

  constructor(call: OnJoinPoolCall) {
    this._call = call;
  }

  get amountsIn(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get dueProtocolFeeAmounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class OnSwapCall extends ethereum.Call {
  get inputs(): OnSwapCall__Inputs {
    return new OnSwapCall__Inputs(this);
  }

  get outputs(): OnSwapCall__Outputs {
    return new OnSwapCall__Outputs(this);
  }
}

export class OnSwapCall__Inputs {
  _call: OnSwapCall;

  constructor(call: OnSwapCall) {
    this._call = call;
  }

  get request(): OnSwapCallRequestStruct {
    return changetype<OnSwapCallRequestStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get balanceTokenIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get balanceTokenOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OnSwapCall__Outputs {
  _call: OnSwapCall;

  constructor(call: OnSwapCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnSwapCallRequestStruct extends ethereum.Tuple {
  get kind(): i32 {
    return this[0].toI32();
  }

  get tokenIn(): Address {
    return this[1].toAddress();
  }

  get tokenOut(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get poolId(): Bytes {
    return this[4].toBytes();
  }

  get lastChangeBlock(): BigInt {
    return this[5].toBigInt();
  }

  get from(): Address {
    return this[6].toAddress();
  }

  get to(): Address {
    return this[7].toAddress();
  }

  get userData(): Bytes {
    return this[8].toBytes();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class QueryExitCall extends ethereum.Call {
  get inputs(): QueryExitCall__Inputs {
    return new QueryExitCall__Inputs(this);
  }

  get outputs(): QueryExitCall__Outputs {
    return new QueryExitCall__Outputs(this);
  }
}

export class QueryExitCall__Inputs {
  _call: QueryExitCall;

  constructor(call: QueryExitCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get lastChangeBlock(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get protocolSwapFeePercentage(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class QueryExitCall__Outputs {
  _call: QueryExitCall;

  constructor(call: QueryExitCall) {
    this._call = call;
  }

  get bptIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountsOut(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class QueryJoinCall extends ethereum.Call {
  get inputs(): QueryJoinCall__Inputs {
    return new QueryJoinCall__Inputs(this);
  }

  get outputs(): QueryJoinCall__Outputs {
    return new QueryJoinCall__Outputs(this);
  }
}

export class QueryJoinCall__Inputs {
  _call: QueryJoinCall;

  constructor(call: QueryJoinCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get lastChangeBlock(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get protocolSwapFeePercentage(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class QueryJoinCall__Outputs {
  _call: QueryJoinCall;

  constructor(call: QueryJoinCall) {
    this._call = call;
  }

  get bptOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountsIn(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get paused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class SetSwapFeePercentageCall extends ethereum.Call {
  get inputs(): SetSwapFeePercentageCall__Inputs {
    return new SetSwapFeePercentageCall__Inputs(this);
  }

  get outputs(): SetSwapFeePercentageCall__Outputs {
    return new SetSwapFeePercentageCall__Outputs(this);
  }
}

export class SetSwapFeePercentageCall__Inputs {
  _call: SetSwapFeePercentageCall;

  constructor(call: SetSwapFeePercentageCall) {
    this._call = call;
  }

  get swapFeePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSwapFeePercentageCall__Outputs {
  _call: SetSwapFeePercentageCall;

  constructor(call: SetSwapFeePercentageCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
